#include <iostream>
#include <string>
#include <vector>
#include <clocale>
using namespace std;

//CREACION DE CRUD AUTOS

struct vehiculos{
    int id;
    string marca;
    string modelo;
    int año;
    double precio; 
    int cantidad;
};

vector<vehiculos> listaVehiculos;
vector<vehiculos> leer() {
    return listaVehiculos;
}

int contadorID = 1;

// Función para agregar un vehículo
void agregar() {
    vehiculos nuevo;
    nuevo.id = contadorID++;

    cout << "Marca: ";
    getline(cin, nuevo.marca);
    cout << "Modelo: ";
    getline(cin, nuevo.modelo);

    while (true) {
        cout << "Año: ";
        cin >> nuevo.año;
        if (nuevo.año >= 1950 && nuevo.año <= 2025) {
            break;
        } else {
            cout << "Año ingresado invalido (SOLO AUTOS ENTRE 1950 Y 2025)" << endl;
        }
    }

    cout << "Precio: ";
    cin >> nuevo.precio;
    cin.ignore();

    for (auto& v : listaVehiculos) {
        if (v.marca == nuevo.marca && v.modelo == nuevo.modelo) {
            v.cantidad += 1;
            cout << "Auto ya existente. Se añade a catalogo con ID: " << nuevo.id << endl;
            return;
        }
    }

    nuevo.cantidad = 1;
    listaVehiculos.push_back(nuevo);
    cout << "Nuevo modelo agregado con éxito :3\nEl ID generado es: " << nuevo.id << endl;
}

// Función para eliminar un vehículo por ID
void eliminar() {
    int idEliminar;
    cout << "Ingrese el ID del vehículo a eliminar: ";
    cin >> idEliminar;
    cin.ignore();

    // Buscar el vehículo con el ID
    auto it = find_if(listaVehiculos.begin(), listaVehiculos.end(), [idEliminar](const vehiculos& v) {
        return v.id == idEliminar;
    });

    if (it != listaVehiculos.end()) {
        // Si lo encuentra, eliminarlo
        listaVehiculos.erase(it);
        cout << "Vehículo con ID " << idEliminar << " eliminado con éxito." << endl;
    } else {
        // Si no lo encuentra
        cout << "No se encontró un vehículo con ese ID." << endl;
    }
}

// Función para mostrar todos los vehículos
void mostrar() {
    if (listaVehiculos.empty()) {
        cout << "No hay vehículos en el catálogo." << endl;
        return;
    }

    cout << "ID | Marca | Modelo | Año | Precio | Cantidad" << endl;
    for (const auto& v : listaVehiculos) {
        cout << v.id << " | " << v.marca << " | " << v.modelo << " | " << v.año << " | " << v.precio << " | " << v.cantidad << endl;
    }
}

int main() {
    int opcion;
    do {
        cout << "\nMENU DE OPCIONES:\n";
        cout << "1. Agregar vehículo\n";
        cout << "2. Eliminar vehículo\n";
        cout << "3. Mostrar vehículos\n";
        cout << "4. Salir\n";
        cout << "Seleccione una opción: ";
        cin >> opcion;
        cin.ignore(); // Limpiar el buffer de entrada

        switch (opcion) {
            case 1:
                agregar();
                break;
            case 2:
                eliminar();
                break;
            case 3:
                mostrar();
                break;
            case 4:
                cout << "Saliendo del programa...\n";
                break;
            default:
                cout << "Opción no válida, por favor ingrese una opción correcta.\n";
        }
    } while (opcion != 4);

    return 0;
}
